syntax = "proto3";

package raft.v1;

message Log {
  bytes value = 1;
  uint64 term = 2;
}

message RequestVoteRequest {
  // The candidate's term.
  uint64 term = 1;
  // The candidate requesting the vote.
  uint64 candidate_id = 2;
  // Index of candidate's last log entry.
  uint64 last_log_entry_index = 3;
  // Term of candidate's last log entry.
  uint64 last_log_entry_term = 4;
}

message RequestVoteResponse {
  // The current term, for candidate to updat itself.
  uint64 term = 1;
  // If the candidate received the vote.
  bool vote_granted = 2;
}

message AppendEntriesRequest {
  // The cluster leader term.
  uint64 leader_term = 1;
  // The cluster leader id.
  uint64 leader_id = 2;
  // The cluster leader commit index (index of highest log entry known to be committed).
  uint64 leader_commit_index = 6;
  // Index of log entry immediately preceding new ones.
  uint64 previous_log_index = 3;
  // Term of log entry immediately preceding new ones.
  uint64 previous_log_term = 4;
  // Log entries to store.
  //
  // Will be empty when AppendEntries is used for heartbeats.
  repeated Log entries = 5;
}

message InstallSnapshotRequest {
  // The cluster leader term.
  uint64 leader_term = 1;
  // The cluster leader id.
  uint64 leader_id = 2;
  // The snapshot replaces all entries up through and including this index. 
  uint64 last_included_index = 3;
  // The term of the log entry at last_included_index.
  uint64 last_included_term = 4;
  // Byte offset where chunk is positioned in the snapshot file. 
  uint64 offset = 5;
  // Raw bytes of the snapshot chunk, starting at offset. 
  bytes data = 6;
  // True if this is the last chunk.
  bool done = 7;
}

message InstallSnapshotResponse {
  // Current term of the follower, for leader to update itself.
  uint64 term = 1;
}

message AppendEntriesResponse {
  // The current term of the follower, for leader to update itself.
  uint64 term = 1;
  // True if follower contained entry matching previous_log_index and previous_log_term.
  bool success = 2;
}

service Raft {
  // Invoked by candidates to start leader elections.
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {}
  // Invoke by the cluster leader to append new log entries to a follower.
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}
  // Invoked by the cluster leader to send chunks of a snapshot to a follower.
  rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotResponse) {}
}
